{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"React Query Setup": {
    "prefix": "rq",
    "body": [
        "export const get${1:ModelName}QueryKey = \"${1/([A-Z][a-z]+)/${1:/downcase}-/g}\"",
        "type get${1}Props = {",
        "   ${2:propName}: ${3: propType}",
        "   depth: number",
        "   refetchInterval: number",
        "}",
        "export function get${1:ModelName}Query({ ${2}, depth = 0, refetchInterval = 5000 }: get${1}Props): UseQueryResult<${1}, GenericStatusErrorType>  {",
        "  const { apiDomain } = useAppConfig()",
        "  const queryRes = useQuery([",
        "      get${1:ModelName}QueryKey,",
        "      ${2},",
        "    ], ",
        "    async () => {",
        "      if (${2}) {",
        "        const url = `\\${apiDomain}/api/${1/(.*)/${1:/camelcase}/}s/\\${${2}}?depth=\\${depth}&refetchInterval=\\${refetchInterval}`;",
        "        const res = await get(url)",
        "        if (res.status === 200) {",
        "          const json = await res.json()",
        "          return json",
        "        }      ",
        "      } ",
        "      throw GenericStatusError({",
        "        status: 404,",
        "        message: \"Contract Id not found\",",
        "      })",
        "  },",
        "  {",
        "    retry: (failCount, error: GenericStatusErrorType) => {",
        "      console.error({ error })",
        "      return !!${2} && failCount < 3",
        "    },",
        "    enabled: !!${2},",
        "  },",
        ")",
        "",
        "return queryRes",
        "}"
    ]
},
	"React Query Get By Id": {
		"prefix": "rqgid",
		"body": [
			"export const get${1:ModelName}ByIdQueryKey = \"${1/([A-Z][a-z]+)/${1:/downcase}-/g}by-id\"",
			"",
			"type get${1}ByIdProps = {",
			"  ${1/(.*)/${1:/camelcase}/}Id?: string",
			"  depth?: number",
			"  refetchInterval?: number",
			"}",
			"",
			"export function get${1}ByIdQuery({ ${1/(.*)/${1:/camelcase}/}Id, depth = 0, refetchInterval }: get${1}ByIdProps): UseQueryResult<Partial<${1}>, GenericStatusErrorType> {",
			"  const { apiDomain } = useAppConfig()",
			"",
			"  const queryRes = useQuery<${1}, GenericStatusErrorType>(",
			"    [get${1}ByIdQueryKey, ${1/(.*)/${1:/camelcase}/}Id],",
			"    async () => {",
			"      if (${1/(.*)/${1:/camelcase}/}Id) {",
			"        const url = `\\${apiDomain}/api/${1/(.*)/${1:/camelcase}/}s/\\${${1/(.*)/${1:/camelcase}/}Id}?depth=\\${depth}`",
			"        const res = await get(url)",
			"",
			"        if (res.status === 200) {",
			"          const json = res.json()",
			"          return json",
			"        }",
			"",
			"        if (res.status === 403) {",
			"          throw GenericStatusError(ERROR_403)",
			"        }",
			"      }",
			"      throw GenericStatusError({",
			"        status: 400,",
			"        message: \"${1}ID is required, but was missing\",",
			"      })",
			"    },",
			"    {",
			"      refetchInterval,",
			"      onSuccess: data => {",
			"        // TODO Remove this test code",
			"        console.log(\"get${1}ByIdQuery onSuccess\", { data })",
			"        // ^ TODO Remove this test code",
			"      },",
			"      retry: (failCount, error: GenericStatusErrorType) => {",
			"        if (error.status === 403) {",
			"          return false",
			"        }",
			"        return failCount < 3",
			"      },",
			"      enabled: !!${1/(.*)/${1:/camelcase}/}Id,",
			"    },",
			"  )",
			"",
			"  return queryRes",
			"}"
		],
		"description": "React Query Get By Id",
	},
	"React Query Get by User Id": {
		"prefix": "rqguid",
		"body": [
				"export const get${1:ModelName}ByUserIdQueryKey = \"${1/([A-Z][a-z]+)/${1:/downcase}-/g}user-id\"",
				"type get${1}ByUserIdProps = {",
				"  accountType: string",
				"  userId?: string",
				"  depth?: number",
				"  refetchInterval?: number",
				"}",
				"export function get${1}ByUserIdQuery({",
				"  accountType,",
				"  userId,",
				"  depth = 0,",
				"  refetchInterval = 5000,",
				"}: get${1}ByUserIdProps): UseQueryResult<Partial<${1}[]>, GenericStatusErrorType> {",
				"  const { apiDomain } = useAppConfig()",
				"  const queryRes = useQuery(",
				"\t [get${1}ByUserIdQueryKey, userId, depth],",
				"\t async () => {",
				"\t\tif (userId) {",
				"\t\t  const res = await get(`\\${apiDomain}/api/${1/(.*)/${1:/camelcase}/}s?\\${generateUserQuery({ accountType, userId })}&depth=1`)",
				"\t\t  if (res.status === 200) {",
				"\t\t\t const json = res.json()",
				"\t\t\t return json",
				"\t\t  }",
				"\t\t}",
				"\t\tthrow GenericStatusError({",
				"\t\t  status: 404,",
				"\t\t  message: \"User Id not found\",",
				"\t\t})",
				"\t },",
				"\t {",
				"\t\trefetchInterval,",
				"\t\tretry: (failCount, error: GenericStatusErrorType) => {",
				"\t\t  console.error({ error })",
				"\t\t  return !!userId && failCount < 3",
				"\t\t},",
				"\t\tenabled: !!userId,",
				"\t },",
				"  )",
				"",
				"  return queryRes",
				"}"
		]
	}
}