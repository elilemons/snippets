{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"React FC with CSS": {
		"prefix": "rfc",
		"body": [
			"import * as React from \"react\"",
			"",
			"import classes from \"./index.module.scss\"",
			"",
			"type Props = {",
			"  ${1:propsName}: ${2:propsType}",
			"}",
			"",
			"const ${3:ComponentName}: React.FC<Props> = ({ ${1:propsName} }: Props) => {",
			"  // TODO Remove this test code",
			"  console.log(\"ELITEST ${3:ComponentName}\", { ${1:propsName} })",
			"  // ^ TODO Remove this test code",
			"",
			"  return <div className={classes.${4:className}}></div>",
			"}",
			"",
			"export default ${3:ComponentName}",
		],
		"description": "React FC with CSS"
	},
	"React Query Get by User Id": {
    "prefix": "rqguid",
    "body": [
        "export const get${1:ModelName}ByUserIdQueryKey = \"${1/([A-Z][a-z]+)/${1:/downcase}-/g}by-id-by-user-id\"",
        "type get${1}ByUserIdProps = {",
        "  accountType: string",
        "  userId?: string",
        "  depth?: number",
        "  refetchInterval?: number",
        "}",
        "export function get${1}ByUserIdQuery({",
        "  accountType,",
        "  userId,",
        "  depth = 0,",
        "  refetchInterval = 5000,",
        "}: get${1}ByUserIdProps): UseQueryResult<Partial<${1}[]>, GenericStatusErrorType> {",
        "  const { apiDomain } = useAppConfig()",
        "  const queryRes = useQuery(",
        "\t [get${1}ByUserIdQueryKey, userId, depth],",
        "\t async () => {",
        "\t\tif (userId) {",
        "\t\t  const res = await get(`\\${apiDomain}/api/${1:/downcase}s?\\${generateUserQuery({ accountType, userId })}&depth=1`)",
        "\t\t  if (res.status === 200) {",
        "\t\t\t const json = res.json()",
        "\t\t\t return json",
        "\t\t  }",
        "\t\t}",
        "\t\tthrow GenericStatusError({",
        "\t\t  status: 404,",
        "\t\t  message: \"User Id not found\",",
        "\t\t})",
        "\t },",
        "\t {",
        "\t\trefetchInterval,",
        "\t\tretry: (failCount, error: GenericStatusErrorType) => {",
        "\t\t  console.error({ error })",
        "\t\t  return !!userId && failCount < 3",
        "\t\t},",
        "\t\tenabled: !!userId,",
        "\t },",
        "  )",
        "",
        "  return queryRes",
        "}"
    ]
},

}