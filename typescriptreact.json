{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"prefix": "cll",
		"body": [
			"// TODO Remove this test code",
			"console.log('ELITEST$1', { $2 });$3",
			"// ^ TODO Remove this test code",
		],
		"description": "Log output to console"
	},
	"React FC with CSS": {
		"prefix": "rfc",
		"body": [
			"import * as React from \"react\"",
			"",
			"import classes from \"./index.module.scss\"",
			"",
			"type Props = {",
			"  ${1:propsName}: ${2:propsType}",
			"}",
			"",
			"const ${3:ComponentName}: React.FC<Props> = ({ ${1:propsName} }: Props) => {",
			"  // TODO Remove this test code",
			"  console.log(\"ELITEST ${3:ComponentName}\", { ${1:propsName} })",
			"  // ^ TODO Remove this test code",
			"",
			"  return <div className={classes.${4:className}}></div>",
			"}",
			"",
			"export default ${3:ComponentName}",
		],
		"description": "React FC with CSS"
	},
	"React Query Get By Id": {
		"prefix": "rqgid",
		"body": [
			"export const get${1:ModelName}ByIdQueryKey = \"${1/([A-Z][a-z]+)/${1:/downcase}-/g}by-id\"",
			"",
			"type get${1}ByIdProps = {",
			"  ${1/(.*)/${1:/camelcase}/}Id?: string",
			"  depth?: number",
			"  refetchInterval?: number",
			"}",
			"",
			"export function get${1}ByIdQuery({ ${1/(.*)/${1:/camelcase}/}Id, depth = 0, refetchInterval }: get${1}ByIdProps): UseQueryResult<Partial<${1}>, GenericStatusErrorType> {",
			"  const { apiDomain } = useAppConfig()",
			"",
			"  const queryRes = useQuery<${1}, GenericStatusErrorType>(",
			"    [get${1}ByIdQueryKey, ${1/(.*)/${1:/camelcase}/}Id],",
			"    async () => {",
			"      if (${1/(.*)/${1:/camelcase}/}Id) {",
			"        const url = `\\${apiDomain}/api/${1/(.*)/${1:/camelcase}/}s/\\${${1/(.*)/${1:/camelcase}/}Id}?depth=\\${depth}`",
			"        const res = await get(url)",
			"",
			"        if (res.status === 200) {",
			"          const json = res.json()",
			"          return json",
			"        }",
			"",
			"        if (res.status === 403) {",
			"          throw GenericStatusError(ERROR_403)",
			"        }",
			"      }",
			"      throw GenericStatusError({",
			"        status: 400,",
			"        message: \"${1}ID is required, but was missing\",",
			"      })",
			"    },",
			"    {",
			"      refetchInterval,",
			"      onSuccess: data => {",
			"        // TODO Remove this test code",
			"        console.log(\"get${1}ByIdQuery onSuccess\", { data })",
			"        // ^ TODO Remove this test code",
			"      },",
			"      retry: (failCount, error: GenericStatusErrorType) => {",
			"        if (error.status === 403) {",
			"          return false",
			"        }",
			"        return failCount < 3",
			"      },",
			"      enabled: !!${1/(.*)/${1:/camelcase}/}Id,",
			"    },",
			"  )",
			"",
			"  return queryRes",
			"}"
		],
		"description": "React Query Get By Id"
	},

}